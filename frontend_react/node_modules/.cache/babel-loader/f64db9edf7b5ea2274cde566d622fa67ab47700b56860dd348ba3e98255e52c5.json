{"ast":null,"code":"const EXPRESS_URL = '/api/notes';\nconst getNotes = async () => {\n  try {\n    const response = await fetch(EXPRESS_URL);\n    const notes = await response.json();\n    return notes;\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst addNote = async note => {\n  const fetchOptions = {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(note)\n  };\n  try {\n    const response = await fetch(EXPRESS_URL, fetchOptions);\n    if (response.status === 201) {\n      const newNote = await response.json();\n      return newNote;\n    } else {\n      console.log(response.status);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst updateNote = async (id, changedNote) => {\n  const fetchOptions = {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(changedNote)\n  };\n  try {\n    const response = await fetch(`${EXPRESS_URL}/${id}`, fetchOptions);\n    if (response.status === 200) {\n      const updatedNote = await response.json();\n      return updatedNote;\n    } else {\n      console.log(response.status);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst deleteNote = async id => {\n  const fetchOptions = {\n    method: \"DELETE\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const response = await fetch(`${EXPRESS_URL}/${id}`, fetchOptions);\n    if (response.status === 204) {\n      return;\n    } else {\n      console.log(response.status);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport { getNotes, addNote, updateNote, deleteNote };","map":{"version":3,"names":["EXPRESS_URL","getNotes","response","fetch","notes","json","error","console","log","addNote","note","fetchOptions","method","headers","body","JSON","stringify","status","newNote","updateNote","id","changedNote","updatedNote","deleteNote"],"sources":["/Users/siegfriedbozza/r/my_projects/render_apps/render_app__react-express--notes/frontend_react/frontend_react/src/services/noteService.js"],"sourcesContent":["const EXPRESS_URL = '/api/notes'\n\nconst getNotes = async () => {\n    try {\n        const response = await fetch(EXPRESS_URL)\n        const notes = await response.json()\n        return notes\n    } catch(error) {\n        console.log(error)\n    }\n}\n\nconst addNote = async (note) => {\n    const fetchOptions = {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(note)\n    }\n    try {\n        const response = await fetch(EXPRESS_URL, fetchOptions)\n        if(response.status === 201) {\n            const newNote = await response.json()\n            return newNote\n        } else {\n            console.log(response.status)\n        }\n    } catch(error) {\n        console.log(error)\n    }\n}\n\nconst updateNote = async (id, changedNote) => {\n    const fetchOptions = {\n        method: \"PATCH\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(changedNote)\n    }\n    try {\n        const response = await fetch(`${EXPRESS_URL}/${id}`, fetchOptions)\n        if(response.status === 200) {\n            const updatedNote = await response.json()\n            return updatedNote\n        } else {\n            console.log(response.status)\n        }\n    } catch(error) {\n        console.log(error)\n    }\n}\n\nconst deleteNote = async (id) => {\n    const fetchOptions = {\n        method: \"DELETE\",\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    try {\n        const response = await fetch(`${EXPRESS_URL}/${id}`, fetchOptions)\n        if(response.status === 204){\n            return\n        } else {\n            console.log(response.status)\n        }\n    } catch(error) {\n        console.log(error)\n    }\n}\n\nexport { getNotes, addNote, updateNote, deleteNote }\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,YAAY;AAEhC,MAAMC,QAAQ,GAAG,YAAY;EACzB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAW,CAAC;IACzC,MAAMI,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IACnC,OAAOD,KAAK;EAChB,CAAC,CAAC,OAAME,KAAK,EAAE;IACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,MAAMG,OAAO,GAAG,MAAOC,IAAI,IAAK;EAC5B,MAAMC,YAAY,GAAG;IACjBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;EAC7B,CAAC;EACD,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAW,EAAEW,YAAY,CAAC;IACvD,IAAGT,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;MACxB,MAAMC,OAAO,GAAG,MAAMhB,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAOa,OAAO;IAClB,CAAC,MAAM;MACHX,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACe,MAAM,CAAC;IAChC;EACJ,CAAC,CAAC,OAAMX,KAAK,EAAE;IACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,MAAMa,UAAU,GAAG,OAAOC,EAAE,EAAEC,WAAW,KAAK;EAC1C,MAAMV,YAAY,GAAG;IACjBC,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,WAAW;EACpC,CAAC;EACD,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,WAAY,IAAGoB,EAAG,EAAC,EAAET,YAAY,CAAC;IAClE,IAAGT,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;MACxB,MAAMK,WAAW,GAAG,MAAMpB,QAAQ,CAACG,IAAI,EAAE;MACzC,OAAOiB,WAAW;IACtB,CAAC,MAAM;MACHf,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACe,MAAM,CAAC;IAChC;EACJ,CAAC,CAAC,OAAMX,KAAK,EAAE;IACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,MAAMiB,UAAU,GAAG,MAAOH,EAAE,IAAK;EAC7B,MAAMT,YAAY,GAAG;IACjBC,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EACD,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,WAAY,IAAGoB,EAAG,EAAC,EAAET,YAAY,CAAC;IAClE,IAAGT,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAC;MACvB;IACJ,CAAC,MAAM;MACHV,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACe,MAAM,CAAC;IAChC;EACJ,CAAC,CAAC,OAAMX,KAAK,EAAE;IACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,SAASL,QAAQ,EAAEQ,OAAO,EAAEU,UAAU,EAAEI,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}